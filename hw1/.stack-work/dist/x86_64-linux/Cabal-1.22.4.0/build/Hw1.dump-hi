
==================== FINAL INTERFACE ====================
2016-01-19 03:51:45.584539 UTC

interface Hw1_BIfEhqsJAjG14532ILwRDE:Hw1 7102
  interface hash: bc58261b9174a9c7babf3ff0d85d3771
  ABI hash: 8678ab3218f5489eea465732a7166ab9
  export-list hash: 764c76c739e53eafa5571d351e28b4e4
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: ac2a39255c77ab14fb6eff81667d8a90
  sig of: Nothing
  used TH splices: False
  where
exports:
  Hw1.addEachPair
  Hw1.addEachPairNonRecursive
  Hw1.bigger
  Hw1.doubleEach
  Hw1.doubleEachNonRecursive
  Hw1.drawCarpet
  Hw1.firstDiff
  Hw1.formatPlay
  Hw1.fringe
  Hw1.hanoi
  Hw1.lengthNonRecursive
  Hw1.mainXML
  Hw1.maxList
  Hw1.maxListNonRecursive
  Hw1.minList
  Hw1.minListNonRecursive
  Hw1.minSize
  Hw1.myEmail
  Hw1.myFractal
  Hw1.myMap
  Hw1.myName
  Hw1.mySID
  Hw1.pairAndOne
  Hw1.pairAndOneNonRecursive
  Hw1.rectangle
  Hw1.rtTriangle
  Hw1.sides
  Hw1.sierpinski
  Hw1.sierpinskiCarpet
  Hw1.takeTree
  Hw1.takeTreeWhile
  Hw1.testResults
  Hw1.treeHeight
  Hw1.treeSize
  Hw1.InternalTree{Hw1.IBranch Hw1.ILeaf}
  Hw1.Radius
  Hw1.Shape{Hw1.Ellipse Hw1.Polygon Hw1.Rectangle Hw1.RtTriangle}
  Hw1.Side
  Hw1.Tree{Hw1.Branch Hw1.Leaf}
  Hw1.Vertex
module dependencies: Play SOE XMLTypes
package dependencies: GLFW-0.5.2.4@GLFW_9zDDfiB3zImCMBoPGPEXML
                      GLURaw-1.5.0.3@GLURa_2ny2CNM2neI3xjbSQY15Ll
                      ObjectName-1.1.0.1@Objec_29HjkJsOm2S5lSH8rBwSAy
                      OpenGLRaw-2.6.1.1@OpenG_5cg6DP2r5P3Ko8xYSniSgL
                      OpenGL-2.13.2.1@OpenG_7zjfzzP9JI76eT0XwPa8CE
                      StateVar-1.1.0.1@State_6K4a3UqSdqh6lGAm1wlr9s
                      array-0.5.1.0@array_E0sTtauuKsGDLZoT7lTbgZ base-4.8.1.0
                      binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd
                      bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH
                      containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN
                      deepseq-1.4.1.1@deeps_LbCWUlehDDeLxurARKDH5o ghc-prim-0.4.0.0
                      half-0.2.2.2@half_Jb2RpfGRtnLGOEym0KYOr6 integer-gmp-1.0.0.0
                      old-locale-1.0.0.7@oldlo_D6X1KPq5Sui5XjrHMwvFwK
                      old-time-1.1.0.3@oldti_FBWJJDS5FKr7UKFScBcUW2
                      stm-2.4.4@stm_C1kFMnPqFjvDhFjgMZGUpr
                      text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh
                      transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X
orphans: base-4.8.1.0:GHC.Base base-4.8.1.0:GHC.Float
         binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH:Data.ByteString.Builder
         stm-2.4.4@stm_C1kFMnPqFjvDhFjgMZGUpr:Control.Monad.STM
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Show
family instance modules: GLFW-0.5.2.4@GLFW_9zDDfiB3zImCMBoPGPEXML:Graphics.UI.GLFW
                         base-4.8.1.0:Control.Applicative base-4.8.1.0:Data.Either
                         base-4.8.1.0:Data.Functor.Identity base-4.8.1.0:Data.Monoid
                         base-4.8.1.0:Data.Type.Equality base-4.8.1.0:Data.Void
                         base-4.8.1.0:GHC.Exts base-4.8.1.0:GHC.Generics
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntMap.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntSet.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Sequence
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Set.Base
                         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text
import  -/  Play 6a6e33b8a0943857289687f4da6f5fc3
  exports: e5a800f70dca2275beff12a7566b8cfe
  play 45688161117421bcf860dddcd5b4d94d
import  -/  SOE 3c3369a7d0dc47508bbd6b3fa1a80d87
  exports: 77bd7ec94baff5840a472109a735130d
  Blue 73c1194916e5e231fdeaa929631008f6
  Window 2dee452b983f74f1d6d94e784d3178de
  closeWindow 2905b31ca46c1ae8f4f228a5e0e52c69
  drawInWindow bbee0c425e9d5cada9f5ae7147626fa7
  getKey 7b1b5f75a26c89d8675a18a9a209fd43
  openWindow 28afe041e5e4e21f88c408b0031c29a4
  polygon c5e7101f86f655b477befbb354ec09ff
  runGraphics 6a8ef39439cd8236950ee2c1c83f48b1
  withColor fef9b6344ab4ad09feb4c6ddce2aad7b
import  -/  XMLTypes 037c72c6452cf48c1e89475eae72000a
  exports: 2151761c31eaad91bd462c579fb853a4
  PCDATA 0d1877dc956e9c1c3ac98757ff09c951
  SimpleXML 259de95812be12badced93b8dbdc2a8b
  xml2string 74c9894bbaa9547faae2d53871652957
import  -/  base-4.8.1.0:Data.Foldable 2e5acb797cfda6b3b7fabd7052abe290
import  -/  base-4.8.1.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.1.0:GHC.Float a2f1c8675ca4f780f3a8aa0b05d1a5eb
import  -/  base-4.8.1.0:GHC.List f31ed8784b3e05f1397195751f7d74ea
import  -/  base-4.8.1.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.1.0:GHC.Real 4c3b525ecbd4d62bb287aec36d4c2f0d
import  -/  base-4.8.1.0:GHC.Show b8c65ca3124f92a166c9f05120382442
import  -/  base-4.8.1.0:Prelude 518f762991bc287d78f21a73c974da1f
import  -/  base-4.8.1.0:System.IO d541b8bdf18c04de3ab7ea0277c4eba3
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
708cba7dce3941a242797e8612378990
  $fEqInternalTree ::
    GHC.Classes.Eq a => GHC.Classes.Eq (Hw1.InternalTree a)
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a $dEq :: GHC.Classes.Eq a.
                  @ (Hw1.InternalTree a)
                  (Hw1.$fEqInternalTree_$c== @ a $dEq)
                  (Hw1.$fEqInternalTree_$c/= @ a $dEq) -}
708cba7dce3941a242797e8612378990
  $fEqInternalTree_$c/= ::
    GHC.Classes.Eq a =>
    Hw1.InternalTree a -> Hw1.InternalTree a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   $dEq :: GHC.Classes.Eq a
                   a1 :: Hw1.InternalTree a
                   b :: Hw1.InternalTree a ->
                 case Hw1.$fEqInternalTree_$c== @ a $dEq a1 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
708cba7dce3941a242797e8612378990
  $fEqInternalTree_$c== ::
    GHC.Classes.Eq a =>
    Hw1.InternalTree a -> Hw1.InternalTree a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U> -}
ef754425fcab8354ffb8e24c506383d1
  $fEqTree :: GHC.Classes.Eq a => GHC.Classes.Eq (Hw1.Tree a)
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a $dEq :: GHC.Classes.Eq a.
                  @ (Hw1.Tree a)
                  (Hw1.$fEqTree_$c== @ a $dEq)
                  (Hw1.$fEqTree_$c/= @ a $dEq) -}
ef754425fcab8354ffb8e24c506383d1
  $fEqTree_$c/= ::
    GHC.Classes.Eq a => Hw1.Tree a -> Hw1.Tree a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a $dEq :: GHC.Classes.Eq a a1 :: Hw1.Tree a b :: Hw1.Tree a ->
                 case Hw1.$fEqTree_$c== @ a $dEq a1 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
ef754425fcab8354ffb8e24c506383d1
  $fEqTree_$c== ::
    GHC.Classes.Eq a => Hw1.Tree a -> Hw1.Tree a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U> -}
708cba7dce3941a242797e8612378990
  $fShowInternalTree ::
    GHC.Show.Show a => GHC.Show.Show (Hw1.InternalTree a)
  DFunId[0]
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a $dShow :: GHC.Show.Show a.
                  @ (Hw1.InternalTree a)
                  (Hw1.$fShowInternalTree_$cshowsPrec @ a $dShow)
                  (Hw1.$fShowInternalTree_$cshow @ a $dShow)
                  (Hw1.$fShowInternalTree_$cshowList @ a $dShow) -}
fb81d70741c8819630ae2b73a2aa552b
  $fShowInternalTree1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
708cba7dce3941a242797e8612378990
  $fShowInternalTree_$cshow ::
    GHC.Show.Show a => Hw1.InternalTree a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a $dShow :: GHC.Show.Show a x :: Hw1.InternalTree a ->
                 Hw1.$fShowInternalTree_$cshowsPrec
                   @ a
                   $dShow
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
708cba7dce3941a242797e8612378990
  $fShowInternalTree_$cshowList ::
    GHC.Show.Show a => [Hw1.InternalTree a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   $dShow :: GHC.Show.Show a
                   eta :: [Hw1.InternalTree a]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Hw1.InternalTree a)
                   (Hw1.$fShowInternalTree_$cshowsPrec
                      @ a
                      $dShow
                      Hw1.$fShowInternalTree1)
                   eta
                   eta1) -}
708cba7dce3941a242797e8612378990
  $fShowInternalTree_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> Hw1.InternalTree a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><L,1*U(U)><S,1*U> -}
db7ac45cb8f44d2c764444a16f5ed4d2
  $fShowShape :: GHC.Show.Show Hw1.Shape
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Hw1.Shape
                  Hw1.$fShowShape_$cshowsPrec
                  Hw1.$fShowShape_$cshow
                  Hw1.$fShowShape_$cshowList -}
db7ac45cb8f44d2c764444a16f5ed4d2
  $fShowShape1 :: Hw1.Shape -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: Hw1.Shape -> Hw1.$w$cshowsPrec 0 w) -}
db7ac45cb8f44d2c764444a16f5ed4d2
  $fShowShape_$cshow :: Hw1.Shape -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Hw1.Shape ->
                 Hw1.$fShowShape_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
db7ac45cb8f44d2c764444a16f5ed4d2
  $fShowShape_$cshowList :: [Hw1.Shape] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Hw1.Shape Hw1.$fShowShape1) -}
db7ac45cb8f44d2c764444a16f5ed4d2
  $fShowShape_$cshowsPrec ::
    GHC.Types.Int -> Hw1.Shape -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: Hw1.Shape ->
                 case w of ww { GHC.Types.I# ww1 -> Hw1.$w$cshowsPrec ww1 w1 }) -}
ef754425fcab8354ffb8e24c506383d1
  $fShowTree :: GHC.Show.Show a => GHC.Show.Show (Hw1.Tree a)
  DFunId[0]
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a $dShow :: GHC.Show.Show a.
                  @ (Hw1.Tree a)
                  (Hw1.$fShowTree_$cshowsPrec @ a $dShow)
                  (Hw1.$fShowTree_$cshow @ a $dShow)
                  (Hw1.$fShowTree_$cshowList @ a $dShow) -}
ef754425fcab8354ffb8e24c506383d1
  $fShowTree_$cshow ::
    GHC.Show.Show a => Hw1.Tree a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a $dShow :: GHC.Show.Show a x :: Hw1.Tree a ->
                 Hw1.$fShowTree_$cshowsPrec
                   @ a
                   $dShow
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ef754425fcab8354ffb8e24c506383d1
  $fShowTree_$cshowList ::
    GHC.Show.Show a => [Hw1.Tree a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   $dShow :: GHC.Show.Show a
                   eta :: [Hw1.Tree a]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Hw1.Tree a)
                   (Hw1.$fShowTree_$cshowsPrec @ a $dShow Hw1.$fShowInternalTree1)
                   eta
                   eta1) -}
ef754425fcab8354ffb8e24c506383d1
  $fShowTree_$cshowsPrec ::
    GHC.Show.Show a => GHC.Types.Int -> Hw1.Tree a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U(U)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a w :: GHC.Show.Show a w1 :: GHC.Types.Int w2 :: Hw1.Tree a ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Hw1.$w$cshowsPrec1 @ a w ww1 w2 }) -}
db7ac45cb8f44d2c764444a16f5ed4d2
  $w$cshowsPrec :: GHC.Prim.Int# -> Hw1.Shape -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
ef754425fcab8354ffb8e24c506383d1
  $w$cshowsPrec1 ::
    GHC.Show.Show a => GHC.Prim.Int# -> Hw1.Tree a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><L,U><S,1*U>,
     Inline: [0] -}
3dea53af65ccfd1f4489a5608b50b94e
  $wa ::
    SOE.Window
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,1*U(1*U(U),A)><L,U(U)><L,U(U)><L,U>,
     Inline: [0],
     Unfolding: (\ w :: SOE.Window
                   w1 :: GHC.Types.Int
                   w2 :: GHC.Types.Int
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 SOE.drawInWindow1
                   w
                   (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                    case Graphics.Rendering.OpenGL.Raw.Functions.ptr_glColor3f
                           `cast`
                         (GHC.Ptr.FunPtr
                            (UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                             ->_P UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                             ->_P UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                             ->_P <GHC.Types.IO ()>_P))_R of ds4 { GHC.Ptr.FunPtr ds5 ->
                    case {__dyn_ccall_GC "" GHC.Prim.Addr#
                                            -> GHC.Prim.Float#
                                            -> GHC.Prim.Float#
                                            -> GHC.Prim.Float#
                                            -> GHC.Prim.State# GHC.Prim.RealWorld
                                            -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                           ds5
                           __float 0.0
                           __float 0.0
                           __float 1.0
                           s of wild1 { (##) ds12 ->
                    SOE.polygon1
                      (GHC.Types.:
                         @ SOE.Point
                         (w1, w2)
                         (GHC.Types.:
                            @ SOE.Point
                            (case w1 of wild { GHC.Types.I# x ->
                             GHC.Types.I# (GHC.Prim.+# x 1) },
                             w2)
                            (GHC.Types.:
                               @ SOE.Point
                               (case w1 of wild { GHC.Types.I# x ->
                                GHC.Types.I# (GHC.Prim.+# x 1) },
                                case w2 of wild { GHC.Types.I# x ->
                                GHC.Types.I# (GHC.Prim.+# x 1) })
                               (GHC.Types.:
                                  @ SOE.Point
                                  (w1,
                                   case w2 of wild { GHC.Types.I# x ->
                                   GHC.Types.I# (GHC.Prim.+# x 1) })
                                  (GHC.Types.[] @ SOE.Point)))))
                      ds12 } })
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R)) (Sym (SOE.NTCo:Graphic[0])))
                   w3) -}
5f70426d920a49a0dc823a45b5608e5a
  $wa1 ::
    GHC.Prim.Int#
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5, Strictness: <S,1*U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
b827edf4f80489feb56e111e79f79016
  $wa2 ::
    SOE.Window
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5, Strictness: <L,U(U(U),A)><L,U(U)><L,U(U)><L,U><L,U>,
     Inline: [0] -}
c2154c60bdce60bfa1d6f54a956b0f86
  $wsides :: Hw1.Shape -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ w :: Hw1.Shape ->
                 case w of wild {
                   Hw1.Rectangle ds ds1 -> 4
                   Hw1.Ellipse ds ds1 -> 42
                   Hw1.RtTriangle ds ds1 -> 3
                   Hw1.Polygon vs
                   -> case GHC.List.$wlenAcc
                             @ (GHC.Types.Float, GHC.Types.Float)
                             vs
                             0 of ww2 { DEFAULT ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<# ww2 3) of wild1 {
                        GHC.Types.False -> ww2 GHC.Types.True -> 0 } } }) -}
f14a61a5d661662d538f16f90a3b210f
  $wtakeTree ::
    GHC.Prim.Int# -> Hw1.InternalTree a -> Hw1.InternalTree a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Inline: [0] -}
bbc479cad556037a4e4341df6492e462
  $wtreeHeight :: Hw1.Tree a -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
e6a9e1265ff714f2dd0a1e48f2cb666c
  $wtreeSize :: Hw1.Tree a -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
708cba7dce3941a242797e8612378990
  data InternalTree a
    = ILeaf | IBranch a (Hw1.InternalTree a) (Hw1.InternalTree a)
    Promotable
6991eccce4f7b4ec64db40174e6e75b2
  type Radius = GHC.Types.Float
db7ac45cb8f44d2c764444a16f5ed4d2
  data Shape
    = Rectangle Hw1.Side Hw1.Side
    | Ellipse Hw1.Radius Hw1.Radius
    | RtTriangle Hw1.Side Hw1.Side
    | Polygon [Hw1.Vertex]
837638b1377320c4159828d104b06eae
  type Side = GHC.Types.Float
ef754425fcab8354ffb8e24c506383d1
  data Tree a = Leaf a | Branch (Hw1.Tree a) (Hw1.Tree a)
    Promotable
7225ecb5c1fb9ee5013773c683bf5f6b
  type Vertex = (GHC.Types.Float, GHC.Types.Float)
558dc9473d3b7cdc545514abf8ecc9db
  addEachPair :: [(GHC.Types.Int, GHC.Types.Int)] -> [GHC.Types.Int]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
b9124c0fac378bc348da09abf7fa3328
  addEachPairNonRecursive ::
    [(GHC.Types.Int, GHC.Types.Int)] -> [GHC.Types.Int]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ a :: [(GHC.Types.Int, GHC.Types.Int)] ->
                 Hw1.addEachPairNonRecursive_go a) -}
b8e8b9cc31777d8d1ceba40ab33a7dec
  addEachPairNonRecursive_go ::
    [(GHC.Types.Int, GHC.Types.Int)] -> [GHC.Types.Int]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
7e555315d8bbf6079d1af33583d11bb0
  bigger :: Hw1.Shape -> GHC.Types.Float -> Hw1.Shape
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(U)>,
     Unfolding: (\ ds :: Hw1.Shape e :: GHC.Types.Float ->
                 case ds of wild {
                   Hw1.Rectangle s1 s2
                   -> Hw1.Rectangle
                        (case s1 of wild1 { GHC.Types.F# x ->
                         case e of wild2 { GHC.Types.F# x1 ->
                         GHC.Types.F# (GHC.Prim.timesFloat# x (GHC.Prim.sqrtFloat# x1)) } })
                        (case s2 of wild1 { GHC.Types.F# x ->
                         case e of wild2 { GHC.Types.F# x1 ->
                         GHC.Types.F# (GHC.Prim.timesFloat# x (GHC.Prim.sqrtFloat# x1)) } })
                   Hw1.Ellipse r1 r2
                   -> Hw1.Ellipse
                        (case r1 of wild1 { GHC.Types.F# x ->
                         case e of wild2 { GHC.Types.F# x1 ->
                         GHC.Types.F# (GHC.Prim.timesFloat# x (GHC.Prim.sqrtFloat# x1)) } })
                        (case r2 of wild1 { GHC.Types.F# x ->
                         case e of wild2 { GHC.Types.F# x1 ->
                         GHC.Types.F# (GHC.Prim.timesFloat# x (GHC.Prim.sqrtFloat# x1)) } })
                   Hw1.RtTriangle s1 s2
                   -> Hw1.RtTriangle
                        (case s1 of wild1 { GHC.Types.F# x ->
                         case e of wild2 { GHC.Types.F# x1 ->
                         GHC.Types.F# (GHC.Prim.timesFloat# x (GHC.Prim.sqrtFloat# x1)) } })
                        (case s2 of wild1 { GHC.Types.F# x ->
                         case e of wild2 { GHC.Types.F# x1 ->
                         GHC.Types.F# (GHC.Prim.timesFloat# x (GHC.Prim.sqrtFloat# x1)) } })
                   Hw1.Polygon vs
                   -> Hw1.Polygon
                        (GHC.Base.map
                           @ (GHC.Types.Float, GHC.Types.Float)
                           @ (GHC.Types.Float, GHC.Types.Float)
                           (\ ds1 :: (GHC.Types.Float, GHC.Types.Float) ->
                            case ds1 of wild1 { (,) x y ->
                            (case x of wild2 { GHC.Types.F# x1 ->
                             case e of wild3 { GHC.Types.F# x2 ->
                             GHC.Types.F#
                               (GHC.Prim.timesFloat# x1 (GHC.Prim.sqrtFloat# x2)) } },
                             case y of wild2 { GHC.Types.F# x1 ->
                             case e of wild3 { GHC.Types.F# x2 ->
                             GHC.Types.F#
                               (GHC.Prim.timesFloat# x1 (GHC.Prim.sqrtFloat# x2)) } }) })
                           vs) }) -}
69a5a67e6a14597a9d9261bfb3d8d272
  doubleEach :: [GHC.Types.Int] -> [GHC.Types.Int]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
d837668e96632468bae9cb7e32183818
  doubleEachNonRecursive :: [GHC.Types.Int] -> [GHC.Types.Int]
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (GHC.Base.map
                   @ GHC.Types.Int
                   @ GHC.Types.Int
                   Hw1.doubleEachNonRecursive1) -}
2f1e0ac8cea094eccfaac1eb2d091d1e
  doubleEachNonRecursive1 :: GHC.Types.Int -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GHC.Types.Int ->
                 case ds of wild { GHC.Types.I# x ->
                 GHC.Types.I# (GHC.Prim.*# x 2) }) -}
46531077a9f451fe26c923e11bda8c88
  drawCarpet ::
    SOE.Window
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.IO ()
  {- Arity: 5,
     Strictness: <L,1*U(1*U(U),A)><L,U(U)><L,U(U)><L,A><L,U>,
     Unfolding: InlineRule (0, True, True)
                Hw1.drawCarpet1
                  `cast`
                (<SOE.Window>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
138e2e0b6fc62d611068087889d595c1
  drawCarpet1 ::
    SOE.Window
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,1*U(1*U(U),A)><L,U(U)><L,U(U)><L,A><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ w :: SOE.Window
                   w1 :: GHC.Types.Int
                   w2 :: GHC.Types.Int
                   w3 :: GHC.Types.Int
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 Hw1.$wa w w1 w2 w4) -}
2b675d1b22daea0c9d1948734419d81e
  firstDiff ::
    GHC.Classes.Eq a => [a] -> [a] -> GHC.Base.Maybe ([a], [a])
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U> -}
ea2405db9836a5980be2ae0628a31386
  firstDiff_$sfirstDiff ::
    [GHC.Types.Char]
    -> [GHC.Types.Char]
    -> GHC.Base.Maybe ([GHC.Types.Char], [GHC.Types.Char])
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
e1fa256a5d6f279549b3433ade9d3dbd
  formatPlay :: XMLTypes.SimpleXML -> XMLTypes.SimpleXML
  {- Arity: 1, Strictness: <L,A>m1,
     Unfolding: InlineRule (1, True, True)
                (\ xml :: XMLTypes.SimpleXML -> Hw1.formatPlay1) -}
c843b0dfce263d1b9616201a55daa4c5
  formatPlay1 :: XMLTypes.SimpleXML
  {- Strictness: m1, Unfolding: (XMLTypes.PCDATA Hw1.formatPlay2) -}
f3027e4c84735e2a413445babebfafed
  formatPlay2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "WRITE ME!"#) -}
5358b16cebde1d01c4440aafe8cfff6d
  fringe :: Hw1.Tree a -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
6ad5f06a51b804e18f855f5aa3e52eb7
  hanoi ::
    GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.IO ()
  {- Arity: 5, Strictness: <S(S),1*U(1*U)><L,U><L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Hw1.hanoi1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
00f6fa88e68b92f2653d97230ed511ae
  hanoi1 ::
    GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5, Strictness: <S(S),1*U(1*U)><L,U><L,U><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: GHC.Base.String
                   w2 :: GHC.Base.String
                   w3 :: GHC.Base.String
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w of ww { GHC.Types.I# ww1 -> Hw1.$wa1 ww1 w1 w2 w3 w4 }) -}
450bd4f15e09c226bb8afd6cca43dcee
  lengthNonRecursive :: [a] -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ @ a ->
                 GHC.List.foldl
                   @ a
                   @ GHC.Types.Int
                   (Hw1.lengthNonRecursive1 @ a)
                   Hw1.$fShowInternalTree1) -}
21e8d4eba0c1802ca9f0a458f9b0d3a6
  lengthNonRecursive1 :: GHC.Types.Int -> a -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><L,A>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a n :: GHC.Types.Int ds :: a ->
                 case n of wild { GHC.Types.I# x ->
                 GHC.Types.I# (GHC.Prim.+# x 1) }) -}
f087f178245aaf51b6aacb3e7e647efc
  mainXML :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Hw1.mainXML1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
e488c9d55792d167414e15b1c3052111
  mainXML1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case System.IO.writeFile1
                        Hw1.mainXML9
                        Hw1.mainXML8
                        s of ds1 { (#,#) ipv ipv1 ->
                 Hw1.mainXML3 Hw1.mainXML9 Hw1.mainXML2 ipv }) -}
8d0bfbc88df3a9315deb6fcbfc00764d
  mainXML2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "sample.html"#) -}
8c98d9c70b9965b8fbb126780d3f0dcf
  mainXML3 ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: (\ file1 :: GHC.Base.String
                   file2 :: GHC.Base.String
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.IO.Handle.FD.openFile1
                        file1
                        GHC.IO.IOMode.ReadMode
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.FD.openFile1
                        file2
                        GHC.IO.IOMode.ReadMode
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv5
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case Hw1.firstDiff_$sfirstDiff ipv3 ipv7 of wild {
                   GHC.Base.Nothing
                   -> GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Hw1.mainXML7
                        GHC.Types.False
                        ipv6
                   GHC.Base.Just ds
                   -> case ds of wild1 { (,) cs ds5 ->
                      case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             Hw1.mainXML6
                             GHC.Types.False
                             ipv6 of ds6 { (#,#) ipv8 ipv9 ->
                      case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             (GHC.List.$wunsafeTake @ GHC.Types.Char 20 cs)
                             GHC.Types.False
                             ipv8 of ds7 { (#,#) ipv10 ipv11 ->
                      case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             Hw1.mainXML5
                             GHC.Types.False
                             ipv10 of ds8 { (#,#) ipv12 ipv13 ->
                      case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             (GHC.List.$wunsafeTake @ GHC.Types.Char 20 ds5)
                             GHC.Types.False
                             ipv12 of ds9 { (#,#) ipv14 ipv15 ->
                      GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Hw1.mainXML4
                        GHC.Types.False
                        ipv14 } } } } } } } } } }) -}
ba5dfefd556bcfc3580478c5452a77b8
  mainXML4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "'\n"#) -}
a32b97c1c974c62aa6b725fb77cc4b93
  mainXML5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "' vs '"#) -}
e07b5e38b47180ab6e5934f230cabc0a
  mainXML6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Results differ: '"#) -}
339bf90a92d287f99ef816bc51d2beda
  mainXML7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Success!\n"#) -}
55ed00508b39098df0c02aa9bf3edff9
  mainXML8 :: GHC.Base.String
  {- Unfolding: (XMLTypes.xml2string Hw1.formatPlay1) -}
588b635307378e625ca9b91cad8b2fe5
  mainXML9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "dream.html"#) -}
f9414d65f0632cb9148adfcb6816245f
  maxList :: [GHC.Types.Int] -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U> -}
8762033b910e7e2b14401c2e90a400dd
  maxListNonRecursive :: [GHC.Types.Int] -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ ds1 :: [GHC.Types.Int] ->
                 case ds1 of wild {
                   [] -> GHC.List.foldr4 @ GHC.Types.Int
                   : x ds2
                   -> case ds2 of wild1 {
                        [] -> x
                        : ipv ipv1
                        -> case x of wild2 { GHC.Types.I# x1 ->
                           case GHC.List.foldr1_$sfoldr1
                                  @ GHC.Types.Int
                                  GHC.Classes.$fOrdInt_$cmax
                                  ipv
                                  ipv1 of wild3 { GHC.Types.I# y1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# x1 y1) of wild4 {
                             GHC.Types.False -> wild2 GHC.Types.True -> wild3 } } } } }) -}
0e9ff3f68e6f3d1a4f60cd1f4969dfaa
  minList :: [GHC.Types.Int] -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U> -}
7beb8a17733f0eab1ce9f4e1b21ae5f2
  minListNonRecursive :: [GHC.Types.Int] -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ ds1 :: [GHC.Types.Int] ->
                 case ds1 of wild {
                   [] -> GHC.List.foldr4 @ GHC.Types.Int
                   : x ds2
                   -> case ds2 of wild1 {
                        [] -> x
                        : ipv ipv1
                        -> case x of wild2 { GHC.Types.I# x1 ->
                           case GHC.List.foldr1_$sfoldr1
                                  @ GHC.Types.Int
                                  GHC.Classes.$fOrdInt_$cmin
                                  ipv
                                  ipv1 of wild3 { GHC.Types.I# y1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# x1 y1) of wild4 {
                             GHC.Types.False -> wild3 GHC.Types.True -> wild2 } } } } }) -}
9a99223e739092dfdccd86375a2098e0
  minSize :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3) -}
8968a3ed43cf67de1206358ec9c5ef18
  myEmail :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "r1jha@ucsd.edu"#) -}
ee0685affe912d5d8e1cf5806597627f
  myFractal :: GHC.Types.IO ()
  {- Strictness: b -}
cc7510007ad09a2e81c0d513b0a9e77f
  myMap :: (a -> b) -> [a] -> [b]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ @ a @ b f :: a -> b eta :: [a] ->
                 letrec {
                   go :: [a] -> [b] {- Arity: 1, Strictness: <S,1*U> -}
                   = \ ds :: [a] ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ b : y ys -> GHC.Types.: @ b (f y) (go ys) }
                 } in
                 go eta) -}
18c6b2a019ef31dc972aef3daedb57b7
  myName :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Rohit Jha"#) -}
4db024af830c29f1b320851378b0aefc
  mySID :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "A53089617"#) -}
1c697d95738414154e8490a53d3e834a
  pairAndOne :: [GHC.Types.Int] -> [(GHC.Types.Int, GHC.Types.Int)]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
01bf7ed3f6b8684e4ea4e7cb015758f2
  pairAndOneNonRecursive ::
    [GHC.Types.Int] -> [(GHC.Types.Int, GHC.Types.Int)]
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (GHC.Base.map
                   @ GHC.Types.Int
                   @ (GHC.Types.Int, GHC.Types.Int)
                   Hw1.pairAndOneNonRecursive1) -}
24fea967e2957f0cc1a272d0f3b05436
  pairAndOneNonRecursive1 ::
    GHC.Types.Int -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GHC.Types.Int ->
                 (x,
                  case x of wild { GHC.Types.I# x1 ->
                  GHC.Types.I# (GHC.Prim.+# x1 1) })) -}
4e11611ec15e49db5e367288a7d2a1dc
  rectangle :: Hw1.Side -> Hw1.Side -> Hw1.Shape
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m4,
     Unfolding: InlineRule (2, True, False)
                (\ s1 :: Hw1.Side s2 :: Hw1.Side ->
                 Hw1.Polygon
                   (GHC.Types.:
                      @ Hw1.Vertex
                      Hw1.rectangle2
                      (GHC.Types.:
                         @ Hw1.Vertex
                         (s1, Hw1.rectangle1)
                         (GHC.Types.:
                            @ Hw1.Vertex
                            (s1, s2)
                            (GHC.Types.:
                               @ Hw1.Vertex
                               (Hw1.rectangle1, s2)
                               (GHC.Types.[] @ Hw1.Vertex)))))) -}
6355df9aaa1eb766be5b026464253727
  rectangle1 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.F# __float 0.0) -}
4c83f8b25b9d9c13a7e887544bbd2e69
  rectangle2 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Hw1.rectangle1, Hw1.rectangle1)) -}
2a786bc3b05a6f77f3313ac7e056f0d6
  rtTriangle :: Hw1.Side -> Hw1.Side -> Hw1.Shape
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m4,
     Unfolding: InlineRule (2, True, False)
                (\ s1 :: Hw1.Side s2 :: Hw1.Side ->
                 Hw1.Polygon
                   (GHC.Types.:
                      @ Hw1.Vertex
                      Hw1.rectangle2
                      (GHC.Types.:
                         @ Hw1.Vertex
                         (s1, Hw1.rectangle1)
                         (GHC.Types.:
                            @ Hw1.Vertex
                            (Hw1.rectangle1, s2)
                            (GHC.Types.[] @ Hw1.Vertex))))) -}
5b0bc08e2bbe10b9d293b410ece5c73e
  sides :: Hw1.Shape -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: Hw1.Shape ->
                 case Hw1.$wsides w of ww { DEFAULT -> GHC.Types.I# ww }) -}
08a67321c44ba7d23cd6d6ff8c2dd7e2
  sierpinski ::
    SOE.Window
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.IO ()
  {- Arity: 5,
     Strictness: <L,U(U(U),A)><L,U(U)><L,U(U)><S,1*U(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Hw1.sierpinski1
                  `cast`
                (<SOE.Window>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
62a89998c33cc039ac220c42a751e853
  sierpinski1 ::
    SOE.Window
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,U(U(U),A)><L,U(U)><L,U(U)><S,1*U(U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ w :: SOE.Window
                   w1 :: GHC.Types.Int
                   w2 :: GHC.Types.Int
                   w3 :: GHC.Types.Int
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w3 of ww { GHC.Types.I# ww1 -> Hw1.$wa2 w w1 w2 ww1 w4 }) -}
c513e163c1be998bc761050b8fb1c8f0
  sierpinskiCarpet :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Hw1.sierpinskiCarpet1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
1371aa9d8978f13c7e6b4872e68c2a91
  sierpinskiCarpet1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case SOE.$wa6
                        Hw1.sierpinskiCarpet6
                        Hw1.sierpinskiCarpet3
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Hw1.$wa2
                        ipv1
                        Hw1.sierpinskiCarpet2
                        Hw1.sierpinskiCarpet2
                        290
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case SOE.getKey1 ipv1 ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 SOE.closeWindow1 ipv1 ipv4 } } }) -}
59f3c39008f9818ada5e2dfaf01461b1
  sierpinskiCarpet2 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 10) -}
be6b942bf30e019d3364360d169514a0
  sierpinskiCarpet3 :: GHC.Base.Maybe SOE.Size
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just @ SOE.Size Hw1.sierpinskiCarpet4) -}
5aafd2c5942d7ff6b1e427d76e9cce33
  sierpinskiCarpet4 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs,
     Unfolding: ((Hw1.sierpinskiCarpet5, Hw1.sierpinskiCarpet5)) -}
830c9b8d737afc29f99107b50d0bd6ae
  sierpinskiCarpet5 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 300) -}
7c461f4c088e31f4099bb77f60d8fc5b
  sierpinskiCarpet6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Sierpinski Carpet"#) -}
3812a4111c1d2f8d5716ae863890339d
  takeTree ::
    GHC.Types.Int -> Hw1.InternalTree a -> Hw1.InternalTree a
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(1*U)><L,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a w :: GHC.Types.Int w1 :: Hw1.InternalTree a ->
                 case w of ww { GHC.Types.I# ww1 -> Hw1.$wtakeTree @ a ww1 w1 }) -}
8043b7f6d7dbb69d9a113d0f95a60423
  takeTreeWhile ::
    (a -> GHC.Types.Bool) -> Hw1.InternalTree a -> Hw1.InternalTree a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U> -}
c09f95a88f32a552b71a8edd44679699
  testResults ::
    GHC.Base.String -> GHC.Base.String -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Hw1.mainXML3
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
fb476ef0dee4300fcb7694f86b54190b
  treeHeight :: Hw1.Tree a -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a w :: Hw1.Tree a ->
                 case Hw1.$wtreeHeight @ a w of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
a5a406f3c6d50ce1421776e54d802e3e
  treeSize :: Hw1.Tree a -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a w :: Hw1.Tree a ->
                 case Hw1.$wtreeSize @ a w of ww { DEFAULT -> GHC.Types.I# ww }) -}
instance GHC.Classes.Eq [Hw1.InternalTree] = Hw1.$fEqInternalTree
instance GHC.Classes.Eq [Hw1.Tree] = Hw1.$fEqTree
instance GHC.Show.Show [Hw1.InternalTree] = Hw1.$fShowInternalTree
instance GHC.Show.Show [Hw1.Shape] = Hw1.$fShowShape
instance GHC.Show.Show [Hw1.Tree] = Hw1.$fShowTree
"SPEC firstDiff @ Char" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                  GHC.Types.Char
  Hw1.firstDiff @ GHC.Types.Char $dEq = Hw1.firstDiff_$sfirstDiff
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

